#lang rhombus

/* 1.2.1 -----

// Normal-order evaluation

   square(square(3 + 7))
    => square(3 + 7) *  square(3 + 7)        (square)
    => ((3 + 7) * (3 + 7)) *  square(3 + 7)  (square)
    => (10 * (3 + 7)) *  square(3 + 7)       (+)
    => (10 * 10) * square(3 + 7)             (+)
    => 100 *  square(3 + 7)                  (*)
    => 100 * ((3 + 7) * (3 + 7))             (square)
    => 100 * (10 * (3 + 7))                  (+)
    => 100 * (10 * 10)                       (+)
    => 100 * 100                             (*)
    => 10000                                 (*)

// Applicative-order evaluation

   square(square(3 + 7))  
    => square(square(10))  (+)
    => square(10 * 10)     (square)
    => square(100)         (*)
    => 100 * 100           (square)
    => 10000               (*)

// There is a huge potential number of possible evaluation orders,
// all resulting in the same outcome because of referential transparency.
// Some examples:

   square(square(3 + 7))
    => square(square(10))     (+)
    => square(10 * 10)        (inner square) 
    => (10 * 10) * (10 * 10)  (square)
    => 100 * (10 * 10)        (*)
    => 100 * 100              (*)
    => 10000                  (*)

   square(square(3 + 7))  
    => square(square(10))       (+)
    => square(10) * square(10)  (outer square)
    => (10 * 10) * square(10)   (square)
    => (10 * 10) * (10 * 10)    (square)
    => 100 * (10 * 10)          (*)
    => 100 * 100                (*)
    => 10000                    (*)

   square(square(3 + 7))
    => square(3 + 7) * square(3 + 7)  (outer square)
    => square(10) * square(3 + 7)     (+)
    => square(10) * square(10)        (+)
    => (10 * 10) * square(10)         (square)
    => (10 * 10) * (10 * 10)          (square)
    => 100 * (10 * 10)                (*)
    => 100 * 100                      (*)
    => 10000

   square(square(3 + 7))  
    => square((3 + 7) * (3 + 7))                  (inner square)
    => ((3 + 7) * (3 + 7)) * ((3 + 7) * (3 + 7))  (square)
    => (10 * 10) * (10 * 10)                      (+)  4! different orders of evaluation
    => 100 * (10 * 10)                            (*)
    => 100 * 100                                  (*)
    => 10000                                      (*)

*/


/* 1.2.2 -----
   fun three(x): 3

   three(3 + 4)
    => 3  (three)

   three(3 + 4)
    => three(7)  (+)
    => 3         (three)
*/


/* 1.2.3 -----

/* Syntax rules:
   i) zero is an expression
   ii) if e is na expression, then so are (succ e) and (pred e)

   Reduction rules:
   (succ (pred e))) => e  (succ.1)
   (pred (succ e))) => e  (pred.1)
*/

   (succ (pred (succ (pred (pred zero))))))
    => (succ (pred (pred zero))))  (succ.1)
    => (pred zero)                 (succ.1)

   (succ (pred (succ (pred (pred zero))))))
    => (succ (pred (pred zero))))  (pred.1)
    => (pred zero)                 (succ.1)

/* Additional syntax rule:
   iii) if eq and e2 are expressons, so is (add e1 e2)

   Additional reduction rules:
   (add zero e2) => e2                       (add.1)
   (add (succ e1) e2) => (succ (add e1 e2))  (add.2)
   (add (pred e1) e2) => (pred (add e1 e2))  (add.3)
*/

   (add (succ (pred zero)) zero)
    => (add zero zero) (succ.1)
    => zero            (add.1)

   (add (succ (pred zero)) zero)
    => (succ (add (pred zero) zero))  (add.2)
    => (succ (pred (add zero zero)))  (add.3)
    => (succ (pred zero))             (add.1)
    => zero                           (succ.1)

   (add (succ (pred zero)) zero)
    => (succ (add (pred zero) zero))  (add.2)
    => (succ (pred (add zero zero)))  (add.3)
    => (add zero zero)                (succ.1)
    => zero                           (add.1)

/* The introduced language of expressions uses prefix notation and nesting to represent a certain integer.
   The overall expression has a total nesting level, which can be thought of as the size of the expession.
   The introduced reduction rules either have no impact, or reduce the size of the expression being evaluated:
   1. Successions of operations that cancel each other (succ.1 & pred.1)
    - reduces nesting level by 2
   2. Ignoring addition of zero (add.1)
    - reduces nesting level by 1 
   3. Reordering the placement of addition operation (add.2,3)
    - no impact on nesting level
    - can lead to further (succ.1) or (pred.1) reduction
   Furthermore, there is no option for an evaluation or reduction to introduce a loop.
   This leads to the conclusion that the reductions will always terminate for any initial expression.
*/

*/

/* 1.2.4 -----

// Reduction rules:
// 1??x => x1101
// 0??x => x00

   1110 =>
   01101 =>
   0100 =>
   000

   01 // Already a canonical form
   
   1110100 =>
   01001101 =>
   0110100 =>
   010000 =>
   00000 =>
   0000 =>
   000

// Does not terminate!
   10100 =>
   001101 =>
   10100 =>
   001101 =>
   (loop)

*/
