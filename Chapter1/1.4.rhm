#lang rhombus/static

/*
  1.4 Functions and definitions
*/

// 1.4.1 -----
// definite_integral :: (num -> num) -> (num -> (num -> num))


// 1.4.2 -----
// (num -> num) -> num
fun apply_zero(f :: Number -> Number) :: Number:
  f(0)

// num -> (num -> num)
fun adder(n :: Number) :: Number -> Number:
  fun(m): n + m
  
// (num -> num) -> (num -> num)
fun apply_and_multiply(f :: Number -> Number) :: Number -> Number:
  fun(n): f(n) * n


// 1.4.3 -----
// sign :: num -> num
fun sign(n :: Number) :: Int:
  cond
  | (n > 0): 1
  | (n < 0): -1
  | ~else: 0


// 1.4.4 -----
// one :: α -> num
fun one(x):
  1

// apply :: (α -> β) -> (α -> β)
fun apply(f):
  fun(x): f(x)

// compose :: ((α, β) -> γ) -> (α -> (β -> γ))
fun compose(f):
  fun(g):
    fun(x): f(g, x)


module test:
  block:
    check apply_zero(fun(n): n * n) ~is 0
    check adder(1)(3) ~is 4
    check apply_and_multiply(fun(n): n * n)(3) ~is 27

  check:
      sign(-128) ~is -1
      sign(200) ~is 1
      sign(0) ~is 0

  block:
    check apply(fun(x): x * x)(3) ~is 9
    check compose(fun(x, y): x + y)(4)(6) ~is 10
