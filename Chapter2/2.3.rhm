#lang rhombus/static/and_meta

/*
  2.3 Characters and strings
*/

annot.macro 'AsciiChar':
  'Char && satisfying(is_ascii)'
  
fun is_ascii(x :: Char) :: Boolean:
  x.to_int() <= 127

fun isdigit(x :: AsciiChar) :: Boolean:
  (Char"0" <= x) && (x <= Char"9")

fun issupper(x :: AsciiChar) :: Boolean:
  (Char"A" <= x) && (x <= Char"Z")

fun islower(x :: AsciiChar) :: Boolean:
  (Char"a" <= x) && (x <= Char"z")

// Converts lower-case ASCII letters to upper-case
fun capitalise(x :: AsciiChar) :: AsciiChar:
  let offset = Char"A".to_int() - Char"a".to_int()
  if(islower(x))
  | Char.from_int(offset + x.to_int())
  | x


// 2.3.1 ----
annot.macro 'LetterOfAlphabet':
  'AsciiChar && converting(fun (c :: AsciiChar) :: AsciiChar: capitalise(c))
     && satisfying(is_alphabet_letter)'

// Char"A" through Char"Z" are assigned ASCII codes 65 through 90.
fun is_alphabet_letter(x :: AsciiChar) :: Boolean:
  let code = x.to_int()
  (code >= 65) && (code <= 90)

// Takes a latter of the alphabet and returns letter coming immediately
// after it (in uppercase). Assumes that letter A follows Z.
fun nextlet(x :: LetterOfAlphabet) :: LetterOfAlphabet:
  if(x == Char"Z")
  | Char"A"
  | Char.from_int(x.to_int() + 1)


// 2.3.2 ----
fun digitval(s :: String) :: Int:
  match s
  | "zero":  0
  | "one":   1
  | "two":   2
  | "three": 3
  | "four":  4
  | "five":  5
  | "six":   6
  | "seven": 7
  | "eight": 8
  | "nine":  9
  | ~else: throw error("Unrecognized value!")


// 2.3.3 ----
["McMillan", "Macmillan", "MacMillan"].sort()


// 2.3.4 ----
showln(repr(42)) // "42"
showln(repr(42) ++ repr(42)) // "4242"
show("\n") // "\n"


// 2.3.5 ----
fun space(n :: NonnegInt) :: String:
  String.make(n, Char" ")
  
fun ljustify(n :: NonnegInt, x :: String) :: String:
  let m = x.length()
  if (m >= n)
  | x
  | x ++ space(n - m)

fun rjustify(n :: NonnegInt, x :: String) :: String:
  let m = x.length()
  if (m >= n)
  | x
  | space(n - m) ++ x

fun cjustify(n :: NonnegInt, x :: String) :: String:
  let m = x.length()
  if (m >= n)
  | x
  | let lm = ((n - m) div 2)
    let rm = (n - m) - lm
    space(lm) ++ x ++ space(rm)


module test:
  check:
    is_ascii(Char"A") ~is #true
    is_ascii(Char"ร") ~is #false

  check:
    isdigit(Char"1") ~is #true
    isdigit(Char"A") ~is #false

  check:
    issupper(Char"C") ~is #true
    issupper(Char"c") ~is #false

  check:
    islower(Char"c") ~is #true
    islower(Char"C") ~is #false

  check:
    capitalise(Char"a") ~is Char"A"
    capitalise(Char"x") ~is Char"X"
    capitalise(Char"Z") ~is Char"Z"
    capitalise(Char"รณ") ~throws "argument does not satisfy annotation"

  check:
    nextlet(Char"a") ~is Char"B"
    nextlet(Char"B") ~is Char"C"
    nextlet(Char"X") ~is Char"Y"
    nextlet(Char"Z") ~is Char"A"
    nextlet(Char"รณ") ~throws "argument does not satisfy annotation"

  check:
    digitval("one") ~is 1
    digitval("nine") ~is 9
    digitval("X") ~throws "Unrecognized value!"

  check:
    ljustify(10, "abc") ~is "abc       "
    ljustify(5, "abcdefghijk") ~is "abcdefghijk"

  check:
    rjustify(10, "abc") ~is "       abc"
    rjustify(5, "abcdefghijk") ~is "abcdefghijk"

  check:
    cjustify(10, "abc") ~is "   abc    "
    cjustify(5, "abcdefghijk") ~is "abcdefghijk"
